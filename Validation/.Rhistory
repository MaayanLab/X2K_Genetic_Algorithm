setwd("~/Desktop/x2k/Validation/")
# Import kinome list
library(readxl)
kinome <- read_excel("~/Desktop/x2k/General_Resources/Kinase.com/Kinome_Hsap.xls")
#kinome_updated <- read_excel("~/Desktop/x2k/General_Resources/Kinase.com/Kinome_Hsap_updated.xls")
kea_kinases <- read.delim("../data/KEA/kea_ranks.txt", header=F, col.names = c("Name", "Rank1","Rank2"))
# IMPORT PYTHON-EDITED L1000 chem pert data
chem_up_edit <-read.delim("Perturbation_Data/LINCS_L1000_Chem/LINCS_L1000_Chem_Pert_up_editPY.txt", header=F)
View(read2[1:20,])
chem_dn_edit <-read.delim("Perturbation_Data/LINCS_L1000_Chem/LINCS_L1000_Chem_Pert_dn_editPY.txt", header=F, colClasses = "character")
setwd("~/Desktop/X2K_Genetic_Algorithm/Validation/")
# Import kinome list
library(readxl)
kinome <- read_excel("~/Desktop/x2k/General_Resources/Kinase.com/Kinome_Hsap.xls")
#kinome_updated <- read_excel("~/Desktop/x2k/General_Resources/Kinase.com/Kinome_Hsap_updated.xls")
kea_kinases <- read.delim("../data/KEA/kea_ranks.txt", header=F, col.names = c("Name", "Rank1","Rank2"))
setwd("~/Desktop/X2K_Genetic_Algorithm/Validation/")
# Import kinome list
library(readxl)
kinome <- read_excel("~/Desktop/x2k/General_Resources/Kinase.com/Kinome_Hsap.xls")
#kinome_updated <- read_excel("~/Desktop/x2k/General_Resources/Kinase.com/Kinome_Hsap_updated.xls")
kea_kinases <- read.delim("../data/KEA/kea_ranks.txt", header=F, col.names = c("Name", "Rank1","Rank2"))
kinome <- read_excel("~/Desktop/x2k/General_Resources/Kinase.com/Kinome_Hsap.xls")
kinome <- read_excel("General_Resources/Kinase.com/Kinome_Hsap.xls")
kinome <- read_excel("../General_Resources/Kinase.com/Kinome_Hsap.xls")
#kinome_updated <- read_excel("~/Desktop/x2k/General_Resources/Kinase.com/Kinome_Hsap_updated.xls")
kea_kinases <- read.delim("../data/KEA/kea_ranks.txt", header=F, col.names = c("Name", "Rank1","Rank2"))
# IMPORT PYTHON-EDITED L1000 chem pert data
chem_up_edit <-read.delim("Perturbation_Data/LINCS_L1000_Chem/LINCS_L1000_Chem_Pert_up_editPY.txt", header=F)
View(read2[1:20,])
chem_dn_edit <-read.delim("Perturbation_Data/LINCS_L1000_Chem/LINCS_L1000_Chem_Pert_dn_editPY.txt", header=F, colClasses = "character")
#kinome_updated <- read_excel("~/Desktop/x2k/General_Resources/Kinase.com/Kinome_Hsap_updated.xls")
kea_kinases <- read.delim("../data/KEA/kea_ranks.txt", header=F, col.names = c("Name", "Rank1","Rank2"))
# IMPORT PYTHON-EDITED L1000 chem pert data
chem_up_edit <-read.delim("Perturbation_Data/LINCS_L1000_Chem/LINCS_L1000_Chem_Pert_up_editPY.txt", header=F)
chem_dn_edit <-read.delim("Perturbation_Data/LINCS_L1000_Chem/LINCS_L1000_Chem_Pert_dn_editPY.txt", header=F, colClasses = "character")
# **** HOW DO YOU TELL IF A DRUG IS INHIBITING OR ACTIVATING THE TARGET
# Import metadata from L1000FWD website
chem_meta <-read.csv("Perturbation_Data/LINCS_L1000_Chem/CD_signature_metadata.csv", header=T)[,c("sig_id","pert_desc")]
##  Kathleen's DrugCentral ID list is the most comprehensive (1500+ drugs) BUT it doesn't include HOW it affects it's targets (inhibit, activate) aka Mechanism of Action (MOA)
#DrugCentral = read.csv("Drug-Target_Data/Drug Central/DrugCentral_EdgeList_v8_RoughManualCorrections_12-06-17.csv", header=T)
## Use Drug Repurposing Hub instead
DRH <-read.delim("Drug-Target_Data/Drug Repurposing Hub/Repurposing_Hub_export.txt", header=T) # All entries have TargeNames
#DRH_filter = data.frame()
#for(row_num in 1:dim(DRH)[1]){
#  genesRow = DRH$Target[row_num]
#  genes = strsplit(as.character(genesRow),", ")[[1]]
#  if(sum(genes %in% kea_kinases$Name)>0 & genesRow!=""){
#    DRH_filter = rbind(DRH_filter, DRH[row_num,])
#  }
#}
## Filter DRH to only include kinase inhibitors
### %like% returns all rows with the substring "kinase inhibitor" somewhere in the MOA col
library(dplyr); library(data.table)
DRH_kinaseInhibitors = subset(DRH, MOA %like% "kinase inhibitor") # 217
DRH_kinase.Antagonist = subset(DRH, MOA %like% "kinase antagonist") # = 0
DRH_kinase.Agonist = subset(DRH, MOA %like% "kinase agonist") # = 0
# Filter any instances with no gene targets listed
DRH_kinaseInhibitors = subset(DRH_kinaseInhibitors, Target!="") #201
### Get drug name from first col and make into new col
get_kinaseInhibitor_experiments <- function(chem_pert){
#chem_pert <- chem_up_edit
Names=c(); DEGlist=c(); LINCS_DrugList=c()
for(number in 1:nrow(chem_pert)){
rowName = as.character(chem_pert[number,]$V1)
rowSplit = strsplit(rowName,"-")[[1]]
Drug = rowSplit[2:(length(rowSplit)-1)] # get first and last elements only
Drug = paste(Drug,collapse="-") # Collapse if multiple elements still
# Add to vector if drug is a kinase inhibitor
if(toupper(Drug) %in% toupper(DRH_kinaseInhibitors$Name)){
LINCS_DrugList = c(LINCS_DrugList, Drug)
# Get kinase targets and put into the name of each experiment
kTargets = strsplit(as.character(DRH_kinaseInhibitors[toupper(DRH_kinaseInhibitors$Name)==toupper(Drug),"Target"][1]),", ")[[1]]
# Strip any invisible \n
kTargets <-gsub("[\r\n]", "", kTargets)
kinaseTargets <- paste("_[",paste(kTargets,collapse="|"),"]", sep="")
Names = c(Names, paste(rowName,kinaseTargets,sep=""))
# Get DEGs for each drug
DEGcols = c(t(chem_pert[number,-1])) # Get all cols except first
DEGs = paste(DEGcols[DEGcols!=""], collapse="\t")
DEGlist = c(DEGlist, DEGs)
}
}
return(list(Drug=LINCS_DrugList, Names=Names, DEGlist=DEGlist)) }
# CHEM_UP
up_output <-get_kinaseInhibitor_experiments(chem_up_edit)
chem_up_kinaseInhibitors <- data.frame(Drug=up_output$Drug,
Name=up_output$Names, ExtraTab="",
Genes=up_output$DEGlist)
dim(chem_up_kinaseInhibitors)
# curl -H "Accept: text/csv" http://lincs.hms.harvard.edu/db/api/v1/protein/ >> prot.json
# curl -H "Accept: text/csv limit: inf" http://lincs.hms.harvard.edu/db/api/v1/protein/ >> prot.json
#as.data.frame(out)
library(jsonlite); library(readxl); library(svMisc)
expts <-as.data.frame(read_excel("Drug-Target_Data/Kinome Scan/LINCS_HMS_ExperimentList.xlsx"))
datasetIDs <- subset(expts, `HMS Dataset Type`=="KINOMEscan" )$`HMS Dataset ID` #|`HMS Dataset Type`=="KiNativ"
length(datasetIDs)
# Import LINCS Drug IDs
# Get small molecule (sm) info
scID <- unique(KS_expt_sub$smallmolecule_smCenterCompoundID)
saltID <- unique(KS_expt_sub$smallmolecule_smSalt)
#url_sm <- paste("http://lincs.hms.harvard.edu/db/api/v1/","smallmolecule/",scID,"-", saltID, "/", sep="")
#KS_sm <-jsonlite::fromJSON(url_sm)
```
# curl -H "Accept: text/csv" http://lincs.hms.harvard.edu/db/api/v1/protein/ >> prot.json
# curl -H "Accept: text/csv limit: inf" http://lincs.hms.harvard.edu/db/api/v1/protein/ >> prot.json
#as.data.frame(out)
library(jsonlite); library(readxl); library(svMisc)
expts <-as.data.frame(read_excel("Drug-Target_Data/Kinome Scan/LINCS_HMS_ExperimentList.xlsx"))
getwd()
# curl -H "Accept: text/csv" http://lincs.hms.harvard.edu/db/api/v1/protein/ >> prot.json
# curl -H "Accept: text/csv limit: inf" http://lincs.hms.harvard.edu/db/api/v1/protein/ >> prot.json
#as.data.frame(out)
library(jsonlite); library(readxl); library(svMisc)
# curl -H "Accept: text/csv" http://lincs.hms.harvard.edu/db/api/v1/protein/ >> prot.json
# curl -H "Accept: text/csv limit: inf" http://lincs.hms.harvard.edu/db/api/v1/protein/ >> prot.json
#as.data.frame(out)
library(jsonlite); library(readxl); #library(svMisc)
expts <-as.data.frame(read_excel("Drug-Target_Data/Kinome Scan/LINCS_HMS_ExperimentList.xlsx"))
datasetIDs <- subset(expts, `HMS Dataset Type`=="KINOMEscan" )$`HMS Dataset ID` #|`HMS Dataset Type`=="KiNativ"
getwd()
expts <-as.data.frame(read_excel("Drug-Target_Data/Kinome _Scan/LINCS_HMS_ExperimentList.xlsx"))
expts <-as.data.frame(read_excel("Drug-Target_Data/Kinome_Scan/LINCS_HMS_ExperimentList.xlsx"))
datasetIDs <- subset(expts, `HMS Dataset Type`=="KINOMEscan" )$`HMS Dataset ID` #|`HMS Dataset Type`=="KiNativ"
length(datasetIDs)
# Import LINCS Drug IDs
# Get small molecule (sm) info
scID <- unique(KS_expt_sub$smallmolecule_smCenterCompoundID)
## SETUP FUNCTION FOR NEXT PART
create_Drug.KinaseTarget_df <- function(KS_expt_sub, decreasing){
# Convert to numeric
KS_expt_sub$datapointValue <- as.numeric(KS_expt_sub$datapointValue)
# Order df according to binding
KS_expt_sub.sort <- KS_expt_sub[order(KS_expt_sub$datapointValue, decreasing=decreasing),]
# Rescale/normalize binding affinity
#KS_expt_sub.sort$datapointValue<-rescale(KS_expt_sub.sort$datapointValue, c(0,1))
## Get drug name
DrugSalt = paste(unique(KS_expt_sub.sort$smallmolecule_smLincsID),
unique(KS_expt_sub.sort$smallmolecule_smName),
unique(KS_expt_sub.sort$smallmolecule_smSalt),ID,sep="_")
hist(KS_expt_sub.sort$datapointValue)
## Get kinases with respective scores
kinase_list = c()
for(row_num in 1:nrow(KS_expt_sub.sort)){
kinase = KS_expt_sub.sort[row_num,]$protein_ppName
#kinase_score = KS_expt_sub.sort[row_num,]$datapointValue
# Get GeneSymbols for each kinase
if(kinase %in% prots$Name){
GeneSymbol <- prots[prots$Name==kinase,]$Gene.Symbol[1]
}
else{GeneSymbol<-kinase}
# Compile into list of kinases with scores
kinase_list <- paste(kinase_list, paste(GeneSymbol, sep=","), "\t", sep="")
}
new_row = data.frame(Name=DrugSalt, ExtraTab="",Kinases=kinase_list)
#Drug_KinaseTargets <- rbind(Drug_KinaseTargets, data.frame(Name=DrugSalt, Kinases=kinase_list))
return(new_row)
}
# GET DATA FROM APIs and organize into df
#get_Drug_KinaseTargets <- function(datasetIDs){
library(scales)
Drug_KinaseTargets = data.frame()
unrecovered_IDs = c()
# Import HMS LINCS protein metadata
prots <-data.frame(read_excel("Drug-Target_Data/Kinome Scan/proteins_20180116225538.xlsx"))
prots <- prots[!is.na(prots$Gene.Symbol),]
pbar=1
for(ID in datasetIDs){
#pbar =  pbar+1
#progress(pbar, progress.bar=T) # Animate progress bar
datasetID <-ID #"20211"
url <-paste("http://lincs.hms.harvard.edu/db/api/v1/","datasetdata/", datasetID, sep="")
KS_expt <-jsonlite::fromJSON(url)
if(length(KS_expt) != 0){
KS_expt <- KS_expt[KS_expt$datapointValue!="ND",] # Get rid if NA values
KS_expt$datapointValue <- gsub(">", "", KS_expt$datapointValue)
# Get just binding affinity results
# "dissociationConstant": Higher value means the more strongly the drug binds to the kinase'
# "percentControl": Higher value means the more strongly the drug binds to the kinase?
if("percentControl" %in% KS_expt$datapointName){
print(paste("*percentControl* dataset",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="percentControl")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else if("dissociationConstant" %in% KS_expt$datapointName){
print(paste("*dissociationConstant* dataset",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="dissociationConstant")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else if("percentInhibition" %in% KS_expt$datapointName){
print(paste("*percentInhibition* dataset:",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="percentInhibition")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else{print(paste("Can't find appropriate measure for ID:",ID));
unrecovered_IDs = c(unrecovered_IDs, ID) }
}
else{ print(paste("No data recovered for ID:",ID));
unrecovered_IDs = c(unrecovered_IDs, ID) }
}
#return(Drug_KinaseTargets) }
#Drug_KinaseTargets <-get_Drug_KinaseTargets(datasetIDs)
write.table(Drug_KinaseTargets, "Drug-Target_Data/Kinome Scan/KinomeScan_Drug.KinaseTargets_noScores.txt", sep='\t',col.names = F, row.names = F, quote=F)
## SETUP FUNCTION FOR NEXT PART
create_Drug.KinaseTarget_df <- function(KS_expt_sub, decreasing){
# Convert to numeric
KS_expt_sub$datapointValue <- as.numeric(KS_expt_sub$datapointValue)
# Order df according to binding
KS_expt_sub.sort <- KS_expt_sub[order(KS_expt_sub$datapointValue, decreasing=decreasing),]
# Rescale/normalize binding affinity
#KS_expt_sub.sort$datapointValue<-rescale(KS_expt_sub.sort$datapointValue, c(0,1))
## Get drug name
DrugSalt = paste(unique(KS_expt_sub.sort$smallmolecule_smLincsID),
unique(KS_expt_sub.sort$smallmolecule_smName),
unique(KS_expt_sub.sort$smallmolecule_smSalt),ID,sep="_")
hist(KS_expt_sub.sort$datapointValue)
## Get kinases with respective scores
kinase_list = c()
for(row_num in 1:nrow(KS_expt_sub.sort)){
kinase = KS_expt_sub.sort[row_num,]$protein_ppName
#kinase_score = KS_expt_sub.sort[row_num,]$datapointValue
# Get GeneSymbols for each kinase
if(kinase %in% prots$Name){
GeneSymbol <- prots[prots$Name==kinase,]$Gene.Symbol[1]
}
else{GeneSymbol<-kinase}
# Compile into list of kinases with scores
kinase_list <- paste(kinase_list, paste(GeneSymbol, sep=","), "\t", sep="")
}
new_row = data.frame(Name=DrugSalt, ExtraTab="",Kinases=kinase_list)
#Drug_KinaseTargets <- rbind(Drug_KinaseTargets, data.frame(Name=DrugSalt, Kinases=kinase_list))
return(new_row)
}
# GET DATA FROM APIs and organize into df
#get_Drug_KinaseTargets <- function(datasetIDs){
library(scales)
Drug_KinaseTargets = data.frame()
unrecovered_IDs = c()
# Import HMS LINCS protein metadata
prots <-data.frame(read_excel("Drug-Target_Data/Kinome_Scan/proteins_20180116225538.xlsx"))
prots <- prots[!is.na(prots$Gene.Symbol),]
pbar=1
for(ID in datasetIDs){
#pbar =  pbar+1
#progress(pbar, progress.bar=T) # Animate progress bar
datasetID <-ID #"20211"
url <-paste("http://lincs.hms.harvard.edu/db/api/v1/","datasetdata/", datasetID, sep="")
KS_expt <-jsonlite::fromJSON(url)
if(length(KS_expt) != 0){
KS_expt <- KS_expt[KS_expt$datapointValue!="ND",] # Get rid if NA values
KS_expt$datapointValue <- gsub(">", "", KS_expt$datapointValue)
# Get just binding affinity results
# "dissociationConstant": Higher value means the more strongly the drug binds to the kinase'
# "percentControl": Higher value means the more strongly the drug binds to the kinase?
if("percentControl" %in% KS_expt$datapointName){
print(paste("*percentControl* dataset",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="percentControl")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else if("dissociationConstant" %in% KS_expt$datapointName){
print(paste("*dissociationConstant* dataset",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="dissociationConstant")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else if("percentInhibition" %in% KS_expt$datapointName){
print(paste("*percentInhibition* dataset:",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="percentInhibition")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else{print(paste("Can't find appropriate measure for ID:",ID));
unrecovered_IDs = c(unrecovered_IDs, ID) }
}
else{ print(paste("No data recovered for ID:",ID));
unrecovered_IDs = c(unrecovered_IDs, ID) }
}
#return(Drug_KinaseTargets) }
#Drug_KinaseTargets <-get_Drug_KinaseTargets(datasetIDs)
write.table(Drug_KinaseTargets, "Drug-Target_Data/Kinome_Scan/KinomeScan_Drug.KinaseTargets_noScores.txt", sep='\t',col.names = F, row.names = F, quote=F)
# Get list of drugs in KINOMEscan and put back in df
KINOMEscan_drugs = c()
for(rowname in Drug_KinaseTargets$Name){
KINOMEscan_drugs = c(KINOMEscan_drugs, strsplit(as.character(rowname),"_")[[1]][2])
}
Drug_KinaseTargets$Drug <- KINOMEscan_drugs
# COLLAPSE DF BY NAME
library(dplyr)
averaged.GeneLists=c(); averaged.NameList=c(); KS.filtered_DrugList=c()
for(drug in unique(Drug_KinaseTargets$Drug)){
KS.filtered_DrugList <- c(KS.filtered_DrugList, drug)
drug_subset <- subset(Drug_KinaseTargets, Drug==drug)
newName <- paste(strsplit(as.character(drug_subset$Name[1]),"_")[[1]][1:2],collapse="_")
# Get average of all genes
for(list in drug_subset$Kinases){
averaged_rank.subset=c()
geneSplit <- strsplit(list,"\t")[[1]]
geneRank <-1:length(geneSplit)
ranking_df <-data.frame(Gene.Name=geneSplit, Gene.Rank=geneRank)
# Get average ranking
average_rank <- ranking_df %>% group_by(Gene.Name) %>% dplyr::summarise(meanRank=mean(Gene.Rank)) %>% as.data.frame()
# Sort genes by rank
sorted_genes <- average_rank[order(average_rank$meanRank), ]$Gene.Name %>% as.character() %>% paste(collapse="\t")
# Compile genes into subset
averaged_rank.subset <- paste(averaged_rank.subset, sorted_genes, collapse='\t')
}
averaged.GeneLists <- c(averaged.GeneLists, averaged_rank.subset)
averaged.NameList <- c(averaged.NameList, newName)
}
Drug_KinaseTargets.avgRank <-data.frame(Name=averaged.NameList, ExtraTab="",
rankedDEGs=averaged.GeneLists,
Drug=KS.filtered_DrugList)
dim(Drug_KinaseTargets.avgRank)
# Write file
write.table(Drug_KinaseTargets.avgRank[-4], "Drug-Target_Data/Kinome Scan/Drug_KinaseTargets.avgRank.txt", sep='\t',col.names = F, row.names = F, quote=F)
# Get list of drugs in KINOMEscan and put back in df
KINOMEscan_drugs = c()
for(rowname in Drug_KinaseTargets$Name){
KINOMEscan_drugs = c(KINOMEscan_drugs, strsplit(as.character(rowname),"_")[[1]][2])
}
Drug_KinaseTargets$Drug <- KINOMEscan_drugs
# COLLAPSE DF BY NAME
library(dplyr)
averaged.GeneLists=c(); averaged.NameList=c(); KS.filtered_DrugList=c()
for(drug in unique(Drug_KinaseTargets$Drug)){
KS.filtered_DrugList <- c(KS.filtered_DrugList, drug)
drug_subset <- subset(Drug_KinaseTargets, Drug==drug)
newName <- paste(strsplit(as.character(drug_subset$Name[1]),"_")[[1]][1:2],collapse="_")
# Get average of all genes
for(list in drug_subset$Kinases){
averaged_rank.subset=c()
geneSplit <- strsplit(list,"\t")[[1]]
geneRank <-1:length(geneSplit)
ranking_df <-data.frame(Gene.Name=geneSplit, Gene.Rank=geneRank)
# Get average ranking
average_rank <- ranking_df %>% group_by(Gene.Name) %>% dplyr::summarise(meanRank=mean(Gene.Rank)) %>% as.data.frame()
# Sort genes by rank
sorted_genes <- average_rank[order(average_rank$meanRank), ]$Gene.Name %>% as.character() %>% paste(collapse="\t")
# Compile genes into subset
averaged_rank.subset <- paste(averaged_rank.subset, sorted_genes, collapse='\t')
}
averaged.GeneLists <- c(averaged.GeneLists, averaged_rank.subset)
averaged.NameList <- c(averaged.NameList, newName)
}
Drug_KinaseTargets.avgRank <-data.frame(Name=averaged.NameList, ExtraTab="",
rankedDEGs=averaged.GeneLists,
Drug=KS.filtered_DrugList)
dim(Drug_KinaseTargets.avgRank)
# Write file
write.table(Drug_KinaseTargets.avgRank[-4], "Drug-Target_Data/Kinome_Scan/Drug_KinaseTargets.avgRank.txt", sep='\t',col.names = F, row.names = F, quote=F)
# Drugs in LINCS L1000
# chem_pert = chem_up_edit
subset_L1000_by_KINOMEscan <-function(chem_pert){
newName_list=c(); filteredDEG_list=c()
for(row.num in 1:nrow(chem_pert)){
rowName = as.character(chem_pert[row.num,]$V1)
rowSplit = strsplit(rowName,"-")[[1]]
L1000_Drug = rowSplit[2:(length(rowSplit)-1)] # get first and last elements only
L1000_Drug = paste(L1000_Drug,collapse="-") # Collapse if multiple elements still
if(toupper(L1000_Drug) %in% toupper(Drug_KinaseTargets.avgRank$Drug)){
# Use L1000 DEGs
DEGs = c(t(chem_pert[row.num,-1]))
DEGs = DEGs[DEGs!=""]
filteredDEG_list = c(filteredDEG_list, paste(DEGs,collapse="\t"))
# Create new Name from L1000 name + unbiased "targets" from KINOMEscan
kinomescan_targets <- Drug_KinaseTargets.avgRank[toupper(Drug_KinaseTargets.avgRank$Drug)==toupper(L1000_Drug),]$rankedDEGs
kinomescan_targets.mod <- paste(strsplit(as.character(kinomescan_targets),"\t")[[1]],collapse="|")
newName <- paste(rowName,paste("[",trimws(kinomescan_targets.mod),"]",sep=""),sep="_")
newName_list <- c(newName_list, newName)
}
}
# Create new
return(list(newName_list=newName_list, filteredDEG_list=filteredDEG_list))
}
# CHEM_UP
L1000_KINOMEscan.filter.UP <-subset_L1000_by_KINOMEscan(chem_up_edit)
L1000_KINOMEscan.filter.UP.df <- data.frame(Names=L1000_KINOMEscan.filter.UP$newName_list, ExtraTab="",
DEGs=L1000_KINOMEscan.filter.UP$filteredDEG_list)
write.table(L1000_KINOMEscan.filter.UP.df,"Perturbation_Data/LINCS_L1000_Chem/KinomeScan_filtered/LINCS-L1000_KINOMEscan.UP_filtered.txt", sep='\t',col.names = F, row.names = F, quote=F)
# CHEM_DN
L1000_KINOMEscan.filter.DN <-subset_L1000_by_KINOMEscan(chem_dn_edit)
