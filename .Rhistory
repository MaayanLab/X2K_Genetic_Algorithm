#KS_expt_sub.sort$datapointValue<-rescale(KS_expt_sub.sort$datapointValue, c(0,1))
## Get drug name
DrugSalt = paste(unique(KS_expt_sub.sort$smallmolecule_smLincsID),
unique(KS_expt_sub.sort$smallmolecule_smName),
unique(KS_expt_sub.sort$smallmolecule_smSalt),ID,sep="_")
hist(KS_expt_sub.sort$datapointValue)
## Get kinases with respective scores
kinase_list = c()
for(row_num in 1:nrow(KS_expt_sub.sort)){
kinase = KS_expt_sub.sort[row_num,]$protein_ppName
#kinase_score = KS_expt_sub.sort[row_num,]$datapointValue
# Get GeneSymbols for each kinase
if(kinase %in% prots$Name){
GeneSymbol <- prots[prots$Name==kinase,]$Gene.Symbol[1]
}
else{GeneSymbol<-kinase}
# Compile into list of kinases with scores
kinase_list <- paste(kinase_list, paste(GeneSymbol, sep=","), "\t", sep="")
}
new_row = data.frame(Name=DrugSalt, ExtraTab="",Kinases=kinase_list)
#Drug_KinaseTargets <- rbind(Drug_KinaseTargets, data.frame(Name=DrugSalt, Kinases=kinase_list))
return(new_row)
}
# GET DATA FROM APIs and organize into df
#get_Drug_KinaseTargets <- function(datasetIDs){
library(scales)
Drug_KinaseTargets = data.frame()
unrecovered_IDs = c()
# Import HMS LINCS protein metadata
prots <-data.frame(read_excel("Drug-Target_Data/Kinome Scan/proteins_20180116225538.xlsx"))
prots <- prots[!is.na(prots$Gene.Symbol),]
pbar=1
for(ID in datasetIDs){
#pbar =  pbar+1
#progress(pbar, progress.bar=T) # Animate progress bar
datasetID <-ID #"20211"
url <-paste("http://lincs.hms.harvard.edu/db/api/v1/","datasetdata/", datasetID, sep="")
KS_expt <-jsonlite::fromJSON(url)
if(length(KS_expt) != 0){
KS_expt <- KS_expt[KS_expt$datapointValue!="ND",] # Get rid if NA values
KS_expt$datapointValue <- gsub(">", "", KS_expt$datapointValue)
# Get just binding affinity results
# "dissociationConstant": Higher value means the more strongly the drug binds to the kinase'
# "percentControl": Higher value means the more strongly the drug binds to the kinase?
if("percentControl" %in% KS_expt$datapointName){
print(paste("*percentControl* dataset",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="percentControl")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else if("dissociationConstant" %in% KS_expt$datapointName){
print(paste("*dissociationConstant* dataset",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="dissociationConstant")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else if("percentInhibition" %in% KS_expt$datapointName){
print(paste("*percentInhibition* dataset:",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="percentInhibition")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else{print(paste("Can't find appropriate measure for ID:",ID));
unrecovered_IDs = c(unrecovered_IDs, ID) }
}
else{ print(paste("No data recovered for ID:",ID));
unrecovered_IDs = c(unrecovered_IDs, ID) }
}
#return(Drug_KinaseTargets) }
#Drug_KinaseTargets <-get_Drug_KinaseTargets(datasetIDs)
write.table(Drug_KinaseTargets, "Drug-Target_Data/Kinome Scan/KinomeScan_Drug.KinaseTargets_noScores.txt", sep='\t',col.names = F, row.names = F, quote=F)
## SETUP FUNCTION FOR NEXT PART
create_Drug.KinaseTarget_df <- function(KS_expt_sub, decreasing){
# Convert to numeric
KS_expt_sub$datapointValue <- as.numeric(KS_expt_sub$datapointValue)
# Order df according to binding
KS_expt_sub.sort <- KS_expt_sub[order(KS_expt_sub$datapointValue, decreasing=decreasing),]
# Rescale/normalize binding affinity
#KS_expt_sub.sort$datapointValue<-rescale(KS_expt_sub.sort$datapointValue, c(0,1))
## Get drug name
DrugSalt = paste(unique(KS_expt_sub.sort$smallmolecule_smLincsID),
unique(KS_expt_sub.sort$smallmolecule_smName),
unique(KS_expt_sub.sort$smallmolecule_smSalt),ID,sep="_")
hist(KS_expt_sub.sort$datapointValue)
## Get kinases with respective scores
kinase_list = c()
for(row_num in 1:nrow(KS_expt_sub.sort)){
kinase = KS_expt_sub.sort[row_num,]$protein_ppName
#kinase_score = KS_expt_sub.sort[row_num,]$datapointValue
# Get GeneSymbols for each kinase
if(kinase %in% prots$Name){
GeneSymbol <- prots[prots$Name==kinase,]$Gene.Symbol[1]
}
else{GeneSymbol<-kinase}
# Compile into list of kinases with scores
kinase_list <- paste(kinase_list, paste(GeneSymbol, sep=","), "\t", sep="")
}
new_row = data.frame(Name=DrugSalt, ExtraTab="",Kinases=kinase_list)
#Drug_KinaseTargets <- rbind(Drug_KinaseTargets, data.frame(Name=DrugSalt, Kinases=kinase_list))
return(new_row)
}
# GET DATA FROM APIs and organize into df
#get_Drug_KinaseTargets <- function(datasetIDs){
library(scales)
Drug_KinaseTargets = data.frame()
unrecovered_IDs = c()
# Import HMS LINCS protein metadata
prots <-data.frame(read_excel("Drug-Target_Data/Kinome_Scan/proteins_20180116225538.xlsx"))
prots <- prots[!is.na(prots$Gene.Symbol),]
pbar=1
for(ID in datasetIDs){
#pbar =  pbar+1
#progress(pbar, progress.bar=T) # Animate progress bar
datasetID <-ID #"20211"
url <-paste("http://lincs.hms.harvard.edu/db/api/v1/","datasetdata/", datasetID, sep="")
KS_expt <-jsonlite::fromJSON(url)
if(length(KS_expt) != 0){
KS_expt <- KS_expt[KS_expt$datapointValue!="ND",] # Get rid if NA values
KS_expt$datapointValue <- gsub(">", "", KS_expt$datapointValue)
# Get just binding affinity results
# "dissociationConstant": Higher value means the more strongly the drug binds to the kinase'
# "percentControl": Higher value means the more strongly the drug binds to the kinase?
if("percentControl" %in% KS_expt$datapointName){
print(paste("*percentControl* dataset",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="percentControl")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else if("dissociationConstant" %in% KS_expt$datapointName){
print(paste("*dissociationConstant* dataset",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="dissociationConstant")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else if("percentInhibition" %in% KS_expt$datapointName){
print(paste("*percentInhibition* dataset:",ID))
KS_expt_sub <-subset(KS_expt, datapointName=="percentInhibition")
Drug_KinaseTargets <- rbind(Drug_KinaseTargets,
create_Drug.KinaseTarget_df(KS_expt_sub,
decreasing=T))
}
else{print(paste("Can't find appropriate measure for ID:",ID));
unrecovered_IDs = c(unrecovered_IDs, ID) }
}
else{ print(paste("No data recovered for ID:",ID));
unrecovered_IDs = c(unrecovered_IDs, ID) }
}
#return(Drug_KinaseTargets) }
#Drug_KinaseTargets <-get_Drug_KinaseTargets(datasetIDs)
write.table(Drug_KinaseTargets, "Drug-Target_Data/Kinome_Scan/KinomeScan_Drug.KinaseTargets_noScores.txt", sep='\t',col.names = F, row.names = F, quote=F)
# Get list of drugs in KINOMEscan and put back in df
KINOMEscan_drugs = c()
for(rowname in Drug_KinaseTargets$Name){
KINOMEscan_drugs = c(KINOMEscan_drugs, strsplit(as.character(rowname),"_")[[1]][2])
}
Drug_KinaseTargets$Drug <- KINOMEscan_drugs
# COLLAPSE DF BY NAME
library(dplyr)
averaged.GeneLists=c(); averaged.NameList=c(); KS.filtered_DrugList=c()
for(drug in unique(Drug_KinaseTargets$Drug)){
KS.filtered_DrugList <- c(KS.filtered_DrugList, drug)
drug_subset <- subset(Drug_KinaseTargets, Drug==drug)
newName <- paste(strsplit(as.character(drug_subset$Name[1]),"_")[[1]][1:2],collapse="_")
# Get average of all genes
for(list in drug_subset$Kinases){
averaged_rank.subset=c()
geneSplit <- strsplit(list,"\t")[[1]]
geneRank <-1:length(geneSplit)
ranking_df <-data.frame(Gene.Name=geneSplit, Gene.Rank=geneRank)
# Get average ranking
average_rank <- ranking_df %>% group_by(Gene.Name) %>% dplyr::summarise(meanRank=mean(Gene.Rank)) %>% as.data.frame()
# Sort genes by rank
sorted_genes <- average_rank[order(average_rank$meanRank), ]$Gene.Name %>% as.character() %>% paste(collapse="\t")
# Compile genes into subset
averaged_rank.subset <- paste(averaged_rank.subset, sorted_genes, collapse='\t')
}
averaged.GeneLists <- c(averaged.GeneLists, averaged_rank.subset)
averaged.NameList <- c(averaged.NameList, newName)
}
Drug_KinaseTargets.avgRank <-data.frame(Name=averaged.NameList, ExtraTab="",
rankedDEGs=averaged.GeneLists,
Drug=KS.filtered_DrugList)
dim(Drug_KinaseTargets.avgRank)
# Write file
write.table(Drug_KinaseTargets.avgRank[-4], "Drug-Target_Data/Kinome Scan/Drug_KinaseTargets.avgRank.txt", sep='\t',col.names = F, row.names = F, quote=F)
# Get list of drugs in KINOMEscan and put back in df
KINOMEscan_drugs = c()
for(rowname in Drug_KinaseTargets$Name){
KINOMEscan_drugs = c(KINOMEscan_drugs, strsplit(as.character(rowname),"_")[[1]][2])
}
Drug_KinaseTargets$Drug <- KINOMEscan_drugs
# COLLAPSE DF BY NAME
library(dplyr)
averaged.GeneLists=c(); averaged.NameList=c(); KS.filtered_DrugList=c()
for(drug in unique(Drug_KinaseTargets$Drug)){
KS.filtered_DrugList <- c(KS.filtered_DrugList, drug)
drug_subset <- subset(Drug_KinaseTargets, Drug==drug)
newName <- paste(strsplit(as.character(drug_subset$Name[1]),"_")[[1]][1:2],collapse="_")
# Get average of all genes
for(list in drug_subset$Kinases){
averaged_rank.subset=c()
geneSplit <- strsplit(list,"\t")[[1]]
geneRank <-1:length(geneSplit)
ranking_df <-data.frame(Gene.Name=geneSplit, Gene.Rank=geneRank)
# Get average ranking
average_rank <- ranking_df %>% group_by(Gene.Name) %>% dplyr::summarise(meanRank=mean(Gene.Rank)) %>% as.data.frame()
# Sort genes by rank
sorted_genes <- average_rank[order(average_rank$meanRank), ]$Gene.Name %>% as.character() %>% paste(collapse="\t")
# Compile genes into subset
averaged_rank.subset <- paste(averaged_rank.subset, sorted_genes, collapse='\t')
}
averaged.GeneLists <- c(averaged.GeneLists, averaged_rank.subset)
averaged.NameList <- c(averaged.NameList, newName)
}
Drug_KinaseTargets.avgRank <-data.frame(Name=averaged.NameList, ExtraTab="",
rankedDEGs=averaged.GeneLists,
Drug=KS.filtered_DrugList)
dim(Drug_KinaseTargets.avgRank)
# Write file
write.table(Drug_KinaseTargets.avgRank[-4], "Drug-Target_Data/Kinome_Scan/Drug_KinaseTargets.avgRank.txt", sep='\t',col.names = F, row.names = F, quote=F)
# Drugs in LINCS L1000
# chem_pert = chem_up_edit
subset_L1000_by_KINOMEscan <-function(chem_pert){
newName_list=c(); filteredDEG_list=c()
for(row.num in 1:nrow(chem_pert)){
rowName = as.character(chem_pert[row.num,]$V1)
rowSplit = strsplit(rowName,"-")[[1]]
L1000_Drug = rowSplit[2:(length(rowSplit)-1)] # get first and last elements only
L1000_Drug = paste(L1000_Drug,collapse="-") # Collapse if multiple elements still
if(toupper(L1000_Drug) %in% toupper(Drug_KinaseTargets.avgRank$Drug)){
# Use L1000 DEGs
DEGs = c(t(chem_pert[row.num,-1]))
DEGs = DEGs[DEGs!=""]
filteredDEG_list = c(filteredDEG_list, paste(DEGs,collapse="\t"))
# Create new Name from L1000 name + unbiased "targets" from KINOMEscan
kinomescan_targets <- Drug_KinaseTargets.avgRank[toupper(Drug_KinaseTargets.avgRank$Drug)==toupper(L1000_Drug),]$rankedDEGs
kinomescan_targets.mod <- paste(strsplit(as.character(kinomescan_targets),"\t")[[1]],collapse="|")
newName <- paste(rowName,paste("[",trimws(kinomescan_targets.mod),"]",sep=""),sep="_")
newName_list <- c(newName_list, newName)
}
}
# Create new
return(list(newName_list=newName_list, filteredDEG_list=filteredDEG_list))
}
# CHEM_UP
L1000_KINOMEscan.filter.UP <-subset_L1000_by_KINOMEscan(chem_up_edit)
L1000_KINOMEscan.filter.UP.df <- data.frame(Names=L1000_KINOMEscan.filter.UP$newName_list, ExtraTab="",
DEGs=L1000_KINOMEscan.filter.UP$filteredDEG_list)
write.table(L1000_KINOMEscan.filter.UP.df,"Perturbation_Data/LINCS_L1000_Chem/KinomeScan_filtered/LINCS-L1000_KINOMEscan.UP_filtered.txt", sep='\t',col.names = F, row.names = F, quote=F)
# CHEM_DN
L1000_KINOMEscan.filter.DN <-subset_L1000_by_KINOMEscan(chem_dn_edit)
destination_file = "mouse_correlation.rda"
# Check if gene expression file was already downloaded, if not in current directory download file form repository
if (!file.exists(destination_file)) {
print("Downloading compressed gene expression matrix.")
url = "https://s3.amazonaws.com/mssm-seq-matrix/mouse_correlation.rda"
download.file(url, destination_file, quiet = FALSE)
} else{
print("Local file already exists.")
}
getwd
getwd()
setwd("~/Desktop/X2K_Genetic_Algorithm/General_Resources/ARCHS4/")
load("mouse_correlation.rda")
head(cc)
write.table(cc, "mouse_correlation.txt", sep='\t',col.names = F, row.names = F, quote=F)
str(cc)
setwd("~/Desktop/X2K_Genetic_Algorithm/")
setwd("~/Desktop/X2K_Genetic_Algorithm/")
# Get TF names from human TF file
read.delim("")
getwd()
setwd("~/Desktop/X2K_Genetic_Algorithm/")
getwd()
# Get TF names from human TF file
archs4_human <-read.delim("TF_datasets/ARCHS4_human/archs4_transcription_factor_gene_set_2017_08.gmt")
# Get TF names from human TF file
archs4_human <-read.delim("TF_datasets/ARCHS4_human/archs4_transcription_factor_gene_set_2017_08.gmt", header=F)
archs4_human
# Get TF names from human TF file
archs4_human <-read.delim("TF_datasets/ARCHS4_human/archs4_transcription_factor_gene_set_2017_08.gmt", header=F, col.names = F)
# Get TF names from human TF file
archs4_human <-read.delim("TF_datasets/ARCHS4_human/archs4_transcription_factor_gene_set_2017_08.gmt", header=F)
str(archs4_human)
TFs_human <- archs4_human$V1
TFs_human
rownames(cc)
## Subset mouse file to only include human TF gene rows
cc_filt = cc[rownames(cc) %in% TFs_human,]
cc_filt
dim(cc_filt)
length(TFs_human)
!(rownames(cc) %in% TFs_human)
## Subset mouse file to only include human TF gene rows
cc_filt <- cc[rownames(cc) %in% TFs_human, !(rownames(cc) %in% TFs_human)]
## Subset mouse file to only include human TF gene rows
cc_filt <- cc[rownames(cc) %in% TFs_human,] # !(rownames(cc) %in% TFs_human)
cc_filt
typeof(cc_filt)
mouse_TF <-data.frame(cc_filt)
mouse_TF
head(mouse_TF)
View(head(mouse_TF))
for(rowNum in 1:length(mouse_TF$X0610007P14RIK)){
print(rowNum)
}
row <- mouse_TF[rowNum,]
row
row[,row>1]
row[, row>.5 | row< -.5]
row
which(row>.5 | row< (-.5))
which(row>.75 | row< (-.75))
dim(rows)
dim(row)
row[1]
row[1:10]
sigCor <- mouse_TF[rowNum, which(mouse_TF[rowNum,]>.75)]
sigCor
sigCor <- mouse_TF[rowNum, mouse_TF[rowNum,]>.75]
sigCor
mouse_TF[rowNum,]>.75
mouse_TF[rowNum,]
sigCor <- mouse_TF[rowNum, mouse_T>.75]
sigCor <- mouse_TF[rowNum, mouse_TF>.75]
sigCor <- mouse_TF[rowNum, which(mouse_TF>.75)]
sigCor <- mouse_TF[rowNum, which(mouse_TF[rowNum]>.75)]
sigCor
sigCor <- mouse_TF[rowNum, which(mouse_TF[rowNum]>.075)]
sigCor
hist(mouse_TF[1,])
mouse_TF[1,]
hist(mouse_TF$X0610007P14RIK)
max(mouse_TF)
min(mouse_TF)
genes <- t(mouse_TF[rowNum,])[,1]
genes
row <- mouse_TF[rowNum,]
row
row <- t(mouse_TF[rowNum,])
row
str(genes)
genes <- genes[order(genes[,1])]
genes <- genes[order(genes)]
genes
genes <- genes[order(abs(genes))]
genes
genes <- genes[order(abs(genes))][:300]
genes <- genes[order(abs(genes))][300]
genes
genes <- genes[order(abs(genes))][1:300]
genes
genes <- t(mouse_TF[rowNum,])
genes <- t(mouse_TF[rowNum,])
genes
genes[,1]
genes <- genes[order(abs(genes[,1]))][1:300]
genes
genes <- genes[order(abs(genes[,1])). ][1:300]
genes <- genes[order(abs(genes[,1])), ][1:300]
genes <- genes[order(abs(genes[,1]))][1:300]
genes <- genes[order(abs(genes[,1]))][1:300]
colnames(genes) < "Name"
colnames(genes)
colnames(genes) < c("Name")
colnames(genes)
head(genes)
typeof)genes
typeof(genes)
genes <- data.frame(t(mouse_TF[rowNum,]))
genes
head(genes)
genes <- genes[order(abs(genes[,1]))][1:300]
genes[,1]
genes <- genes[order(abs(genes[,1])), ][1:300]
genes
# Get the top values
genes <- genes[order(abs(genes[,1])), ][1:300, ]
genes[order(abs(genes[,1])), ]
genes[order(abs(genes[,1])), ]
TF <- colnames(genes)
TF
genes <- data.frame(t(mouse_TF[rowNum,]))
TF <- colnames(genes)
TF
colnames(genes) <-
# Get the top values
genes <- genes[order(abs(genes$paste(TF))), ] [1:300]
colnames(genes) <-
# Get the top values
genes <- genes[order(abs(genes[, TF]))), ] [1:300]
colnames(genes) <-
# Get the top values
genes <- genes[order(abs(genes[, TF])), ] [1:300]
genes[, TF]
genes
genes
genes <- data.frame(t(mouse_TF[rowNum,]))
genes
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[, TF])), ] [1:300]
genes[, TF]
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(paste(TF)])), ] [1:300]
genes
c(genes)
genes <- data.frame(t(mouse_TF[rowNum,]))
genes
TF <- colnames(genes)
eval(TF)
TF <- colnames(genes)
colnames(genes)
colnames(genes) <-
# Get the top values
genes2 <- genes[, order(abs(genes[,1]])), ] [1:300]
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1]])), ] [1:300]
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1])), ] [1:300]
abs(genes[,1])
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1]))] [1:300]
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1])), ] [1:300]
genes[order(abs(genes[,1])), ]
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1])), ] [1:300, ]
# For the human TF co-expression file, she took the top 300 genes with the greatest absolute correlation value
for(rowNum in 1:length(mouse_TF$X0610007P14RIK)){
genes <- data.frame(t(mouse_TF[rowNum,]))
TF <- colnames(genes)
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1])), ] [1:300, ]
}
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1])), ] [1:300, ]
genes2 <- genes[order(abs(genes[,1])), ]
genes2
colnames(genes) <-
# Get the top values
genes2 <- genes[order(genes[,1]), ] [1:300]
genes2 <- genes[order(abs(genes[,1])), ]
genes2
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1])), ,drop=F] [1:300]
genes[order(abs(genes[,1])), ,drop=F]
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1]), decreasing=T), ,drop=F] [1:300]
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1]), decreasing=T), ,drop=F]
genes2
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1]), decreasing=T), ,drop=F][1:300,]
genes2[1:300,]
genes2[1:300]
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1]), decreasing=T), ,drop=F][1:300, drop=F]
colnames(genes) <-
# Get the top values
genes2 <- genes[order(abs(genes[,1]), decreasing=T), ,drop=F][1:300, ,drop=F]
genes2
colnames(genes) <-
# Get the top values
top300 <- genes[order(abs(genes[,1]), decreasing=T), ,drop=F][1:300, ,drop=F]
names(top300)
row.names(top300)
geneList <- paste(row.names(top300), collapse="/t")
geneList
newLine = paste(TF, "NA", geneList, collapse="\t")
newLine
newLine = paste(TF, "NA", geneList, sep="\t")
newLine
geneLists=c(); TF_list=c()
for(rowNum in 1:length(mouse_TF$X0610007P14RIK)){
genes <- data.frame(t(mouse_TF[rowNum,]))
TF_list <- c(TF_list, colnames(genes))
# Get the top values
top300 <- genes[order(abs(genes[,1]), decreasing=T), ,drop=F][1:300, ,drop=F]
geneLists <- c(geneLists, paste(row.names(top300), collapse="/t"))
}
TF_mouse_df <-data.frame(TF=TF_list, Extra="NA", Genes=geneLists)
write.table(TF_mouse_df, "TF_datasets/ARCHS4_mouse/archs4_MOUSE_transcription_factor_gene_set_2018_02.gmt", sep='\t',col.names = F, row.names = F, quote=F)
geneLists=c(); TF_list=c()
for(rowNum in 1:length(mouse_TF$X0610007P14RIK)){
genes <- data.frame(t(mouse_TF[rowNum,]))
TF_list <- c(TF_list, colnames(genes))
# Get the top values
## Don't include 1 because it's alwways going to be the gene correlated with itself
top300 <- genes[order(abs(genes[,1]), decreasing=T), ,drop=F][2:300, ,drop=F]
geneLists <- c(geneLists, paste(row.names(top300), collapse="\t"))
}
TF_mouse_df <-data.frame(TF=TF_list, Extra="NA", Genes=geneLists)
write.table(TF_mouse_df, "TF_datasets/ARCHS4_mouse/archs4_MOUSE_transcription_factor_gene_set_2018_02.gmt", sep='\t',col.names = F, row.names = F, quote=F)
